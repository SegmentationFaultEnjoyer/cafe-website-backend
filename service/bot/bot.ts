import fs from 'fs'
import { join } from 'path'
import { Telegraf } from 'telegraf'

import { getConfig } from '@/config'
import { createLogger } from '@/helpers'
import { CustomerInfo, OrderedItems } from '@/types'

type MessagePayload = {
  contains: OrderedItems[]
  payment: number
  totalPrice: number
  order_id: string
  customerInfo: CustomerInfo
}

const config = getConfig()
const logger = createLogger()

const bot = new Telegraf(config.bot.accessToken)

const buildMessage = (payload: MessagePayload): string => {
  let str = ''
  let count = 1

  str += `<b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> ${payload.order_id}\n\n`

  for (const i of payload.contains) {
    str += `${count}. <u>${i.name}</u> - <i>${i.amount} —à—Ç.</i> \n`
    str += `–¶—ñ–Ω–∞: <i> ${i.price} –≥—Ä–Ω</i>  \n`

    if (i.extras != null) {
      str += '–î–æ–¥–∞—Ç–∫–∏: \n'
      for (const extraItem of i.extras) {
        str += `\t\t‚Ä¢<i>${extraItem.name} ${extraItem.amount} —à—Ç. üí¥ ${extraItem.price} –≥—Ä–Ω </i>\n`
      }
    }

    if (i.option != null && i.option.length != 0) {
      let tmpstr = ''
      for (const opt of i.option) {
        tmpstr += `\t\t‚Ä¢<i>${opt.name}: ${opt.pickedOption}</i>\n`
      }
      str += `–û–ø—Ü—ñ—ó:\n${tmpstr}`
    }

    str += `–í–∞—Ä—Ç—ñ—Å—Ç—å: <i>${i.totalPrice}</i> –≥—Ä–Ω\n`
    str += '=========================' + '\n'

    count++
  }

  const orderPayMethod = payload.payment ? '–ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–∫—É' : '–∑–¥—ñ–π—Å–Ω–µ–Ω–∞ –Ω–∞ —Å–∞–π—Ç—ñ'

  str += `–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: <b>${orderPayMethod}</b> \n`
  str += `–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: <b>${payload.totalPrice} –≥—Ä–Ω </b> üí∞ \n\n`

  str += '<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–Ω–∏–∫–∞</b>\n'
  str += "–Ü–º'—è: " + payload.customerInfo.name + '\n'
  str += '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ' + payload.customerInfo.phoneNumber + '\n'
  str += '–ê–¥—Ä–µ—Å–∞: ' + payload.customerInfo.addres

  return str
}

const getUsersList = (): number[] => {
  const rawData = fs.readFileSync(join(__dirname, 'persons.json'))
  const jsonObj = JSON.parse(rawData as unknown as string)

  if (!jsonObj.users) return []

  return jsonObj.users
}

export const startBot = () => {
  if (!config.bot.start) return

  bot.start(ctx => {
    ctx.reply('–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º')
  })
  bot.launch()

  logger.info('Bot started')
}

export const sendMessage = async (payload: MessagePayload) => {
  const message = buildMessage(payload)

  const users = getUsersList()

  for (const user of users) {
    await bot.telegram.sendMessage(user, message, { parse_mode: 'HTML' })
  }
}

// const handleBotStart = (ctx: StartContext) => {
//   const users = getUsersList()

//   if (!users.length || !users.includes(ctx.update.message.chat.id)) {
//     ctx.reply('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –∫–æ–º–∞–Ω–¥–∏')
//     return
//   }

//   ctx.reply('–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º')
// }

// function checkPersons(ctx: Context) {
//   if (jsonObj.users.length === 0 || !jsonObj.users.includes(ctx.update.message.chat.id)) {
//     jsonObj.users.push(ctx.update.message.chat.id)
//     fs.writeFileSync(join(__dirname, 'persons.json'), JSON.stringify(jsonObj))
//     ctx.reply('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –∫–æ–º–∞–Ω–¥–∏')
//     return
//   }
//   ctx.reply('–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º')
// }
